{
  "Loxy": {
    "MaskGlyph": "\u0001",
    "MaskHue": 0,
    "Statistics": {
      "Health": 2,
      "MaximumHealth": 2,
      "AttackDice": 2,
      "MaximumAttack": 1,
      "DefendDice": 4,
      "MaximumDefend": 2,
      "XP": 0,
      "XPGoal": 10,
      "XPLevel": 1,
      "AdvancementPointsPerLevel": 10,
      "AdvancementPoints": 0,
      "Energy": 10,
      "MaximumEnergy": 10,
      "Jools": 20
    },
    "InitializeScript": "\ncharacter:AddItem(ItemInitializer.CreateItem(character.World,\u0022ClayPot\u0022))",
    "EffectScripts": {
      "Forage": "\nlocal cell = EffectExtensions.ToTerrainEffect(effect).Cell\nif not CharacterExtensions.ConsumeEnergy(character, 1, \u0022forage\u0022) then\n    return\nend\nlocal itemType = CellExtensions.GenerateForageItemType(cell)\nif System.String.IsNullOrEmpty(itemType) then\n    character.World:CreateMessage():AddLine(7, CharacterExtensions.Name(character) .. \u0022 finds nothing.\u0022)\n    return\nend\nlocal item = ItemInitializer.CreateItem(character.World, itemType)\ncharacter:AddItem(item)\ncharacter.World:CreateMessage():AddLine(7, CharacterExtensions.Name(character) .. \u0022 finds \u0022 .. ItemExtensions.Name(item))",
      "Buy": "\n        local itemType = effect:GetMetadata(\u0022ItemType\u0022)\n        local price = effect:GetStatistic(\u0022Price\u0022)\n        if CharacterExtensions.Jools(character) \u003C price then\n            character.World:\n                CreateMessage():\n                AddLine(7, \u0022You don\u0027t have enough!\u0022):\n                AddChoice(\u0022Shucks!\u0022, effect:GetMetadata(\u0022EffectType\u0022))\n            return\n        end\n        CharacterExtensions.AddJools(character, -price)\n        character:AddItem(ItemInitializer.CreateItem(character.World, itemType))\n        character.World:\n            CreateMessage():\n            AddLine(7, \u0022Thank you for yer purchase!\u0022):\n            AddChoice(\u0022No worries!\u0022, effect:GetMetadata(\u0022EffectType\u0022))",
      "BumpRiver": "\n        local msg = character.World:CreateMessage():\r\n            AddLine(7, CharacterExtensions.Name(character) .. \u0022 visits the river bank.\u0022):\r\n            AddChoice(\u0022Cool story, bro!\u0022, \u0022ExitDialog\u0022)\r\n        if CharacterExtensions.HasItemTypeInInventory(character, \u0022ClayPot\u0022) then\r\n            msg:AddChoice(\u0022Fill Clay Pot with Water\u0022, \u0022FillClayPot\u0022)\r\n        end",
      "CompleteRatQuest": "\nlocal jools = 0\r\nlocal items = CharacterExtensions.ItemsOfItemType(character, \u0022RatTail\u0022)\r\nfor i = 0,items.Length-1 do\r\n    local item = items[i]\r\n    jools = jools \u002B 1\r\n    character:RemoveItem(item)\r\n    item:Recycle()\r\nend\r\nCharacterExtensions.AddJools(character, jools)\r\ncharacter.World:CreateMessage():AddLine(7, CharacterExtensions.Name(character) .. \u0022 receives \u0022 .. jools .. \u0022 jools.\u0022)",
      "PotterMakePot": "\nlocal price = 20\r\nlocal RecipeType = \u0022UnfiredPot\u0022\r\nif CharacterExtensions.Jools(character) \u003C price then\r\n    character.World:CreateMessage():\r\n                AddLine(7, \u0022The price is \u0022 .. price .. \u0022 jools.\u0022):\r\n                AddLine(7, CharacterExtensions.Name(character) .. \u0022 has \u0022 .. CharacterExtensions.Jools(character) .. \u0022 jools)\u0022)\r\n    return\r\nend\r\nif not RecipeTypes.CanCraft(RecipeType, character) then\r\n    local msg = character.World:CreateMessage():AddLine(7, \u0022To make a pot, I need:\u0022)\r\n    CharacterExtensions.AddRecipeInputs(character, msg, RecipeType)\r\n    return\r\nend\r\nCharacterExtensions.AddJools(character, -price)\r\nRecipeTypes.Craft(RecipeType, character)\r\nRecipeTypes.Craft(\u0022ClayPot\u0022,character)\r\ncharacter.World:CreateMessage():\r\n    AddLine(4, CharacterExtensions.Name(character) .. \u0022 loses \u0022 .. price .. \u0022 jools\u0022):AddLine(10, CharacterExtensions.Name(character) .. \u0022 gains 1 \u0022 .. ItemTypes.ToItemTypeDescriptor(\u0022ClayPot\u0022).Name)",
      "PayInnkeeper": "\nif character:GetFlag(\u0022PaidInnkeeper\u0022) then\r\n    character.World:CreateMessage():\r\n                AddLine(7, \u0022You\u0027ve already paid!\u0022)\r\n    return\r\nend\r\nlocal bedCost = 1\r\nif CharacterExtensions.Jools(character) \u003C bedCost then\r\n    character.World:CreateMessage():\r\n                AddLine(7, \u0022Sorry! No jools, no bed!\u0022)\r\n    return\r\nend\r\nCharacterExtensions.AddJools(character, -bedCost)\r\ncharacter:SetFlag(\u0022PaidInnkeeper\u0022, true)\r\ncharacter.World:CreateMessage():\r\n                AddLine(7, \u0022Thanks for yer business.\u0022):\r\n                AddLine(7, \u0022Choose any bed you like.\u0022)",
      "PervertInnkeeper": "\ncharacter.World:CreateMessage():\r\n    AddLine(7, \u0022I\u0027m not a pervert!\u0022):\r\n    AddLine(7, \u0022I\u0027m just Australian!\u0022)",
      "StartRatQuest": "\ncharacter.World:CreateMessage():\r\n    AddLine(7, \u0022Well, there are a bunch of rats in the cellar.\u0022):\r\n    AddLine(7, \u0022I\u0027ll pay you 1 jools for each rat tail.\u0022):\r\n    AddLine(7, \u0022I only accept the tails, no corpses.\u0022):\r\n    AddLine(7, \u0022So you\u0027ll need to cut them off first.\u0022):\r\n    AddChoice(\u0022I\u0027m on it!\u0022, \u0022AcceptRatQuest\u0022):\r\n    AddChoice(\u0022Mebbe later?\u0022, \u0022ExitDialog\u0022)",
      "GorachanTalk": "\nlocal msg = character.World:CreateMessage():\r\n                AddLine(7, \u0022Welcome to Jusdatip Inn!\u0022):\r\n                AddLine(7, \u0022I\u0027m Gorachan.\u0022):\r\n                AddLine(7, \u0022You can rest in a bed for 1 jools.\u0022):\r\n                AddLine(7, \u0022I\u0027d offer to join you,\u0022):\r\n                AddLine(7, \u0022but then you wouldn\u0027t get any rest!\u0022):\r\n                AddChoice(\u0022Cool story, bro!\u0022, \u0022ExitDialog\u0022):\r\n                AddChoice(\u0022Yer a pervert!\u0022, \u0022PervertInnkeeper\u0022):\r\n                AddChoice(\u0022I\u0027ll take a bed.\u0022, \u0022PayInnkeeper\u0022)\r\nif character:GetFlag(\u0022RatQuest\u0022) then\r\n    if CharacterExtensions.HasItemTypeInInventory(character, \u0022RatTail\u0022) then\r\n        msg:AddChoice(\u0022Here\u0027s some rat tails!\u0022, \u0022CompleteRatQuest\u0022)\r\n    end\r\nelse\r\n    msg:AddChoice(\u0022I need a job!\u0022, \u0022StartRatQuest\u0022)\r\nend",
      "TrainHealth": "\nlocal msg = character.World:CreateMessage()\r\nlocal Multiplier = 5\r\nlocal TrainingCost = Multiplier * CharacterExtensions.MaximumHealth(character)\r\nif CharacterExtensions.AdvancementPoints(character) \u003C TrainingCost then\r\n    msg:AddLine(7, \u0022To go from \u0022 .. CharacterExtensions.MaximumHealth(character) .. \u0022 to \u0022 .. CharacterExtensions.MaximumHealth(character) \u002B 1 .. \u0022 Maximum Health,\u0022)\r\n    msg:AddLine(7, \u0022you need \u0022 .. TrainingCost .. \u0022 AP, but you have \u0022 .. CharacterExtensions.AdvancementPoints(character) .. \u0022.\u0022)\r\n    msg:AddLine(7, \u0022Come back when yer more experienced!\u0022)\r\n    return\r\nend\r\nCharacterExtensions.AddAdvancementPoints(character, -TrainingCost)\r\nCharacterExtensions.SetMaximumHealth(character, CharacterExtensions.MaximumHealth(character) \u002B 1)\r\nCharacterExtensions.SetHealth(character, CharacterExtensions.Health(character) \u002B 1)\r\nmsg:AddLine(4, CharacterExtensions.Name(character) .. \u0022 loses \u0022 .. TrainingCost .. \u0022 AP\u0022)\r\nmsg:AddLine(2, CharacterExtensions.Name(character) .. \u0022 adds 1 Maximum Health\u0022)\r\nmsg:AddLine(7, \u0022Yer now at \u0022 .. CharacterExtensions.MaximumHealth(character) .. \u0022 Maximum Health.\u0022)\r\nmsg:AddLine(7, \u0022Remember! if you don\u0027t have yer health,\u0022)\r\nmsg:AddLine(7, \u0022you don\u0027t really have anything!\u0022)",
      "HealthTrainerTalk": "\ncharacter.World:CreateMessage():\r\n    AddLine(7, \u0022I am the health trainer!\u0022):\r\n    AddLine(7, \u0022I can help you increase yer health.\u0022):\r\n    AddLine(7, \u0022The cost is \u0022 .. CharacterExtensions.MaximumHealth(character) * 5 .. \u0022 AP.\u0022):\r\n    AddChoice(\u0022Cool story, bro!\u0022, \u0022ExitDialog\u0022):\r\n    AddChoice(\u0022Train me!\u0022, \u0022TrainHealth\u0022)",
      "Heal": "\nlocal maximumHealth = math.min(CharacterExtensions.MaximumHealth(character), effect:GetStatistic(\u0022MaximumHealth\u0022))\r\nif CharacterExtensions.Health(character) \u003E= maximumHealth then\r\n    character.World:CreateMessage():AddLine(7, \u0022Nothing happens!\u0022)\r\n    return\r\nend\r\nCharacterExtensions.SetHealth(character, maximumHealth)\r\nlocal msg =\r\n    character.World:\r\n        CreateMessage():\r\n        AddLine(7, CharacterExtensions.Name(character) .. \u0022 is healed!\u0022):\r\n        AddLine(7, CharacterExtensions.Name(character) .. \u0022 now has \u0022 .. CharacterExtensions.Health(character) .. \u0022 health.\u0022)\r\nlocal jools = math.floor(CharacterExtensions.Jools(character)/2)\r\nCharacterExtensions.AddJools(character, -jools)\r\nif jools \u003E 0 then\r\n    msg:AddLine(4, CharacterExtensions.Name(character) .. \u0022 loses {jools} jools!\u0022)\r\nend",
      "NihilistPrices": "\ncharacter.World:CreateMessage():\r\n    AddLine(7, \u0022I don\u0027t sell anything.\u0022):\r\n    AddLine(7, \u0022I\u0027m a nihilist, remember?\u0022)",
      "FillClayPot": "\nRecipeTypes.Craft(\u0022WaterPot\u0022, character)\r\ncharacter.World:CreateMessage():AddLine(7, CharacterExtensions.Name(character) .. \u0022 fills a \u0022 .. ItemTypes.ToItemTypeDescriptor(\u0022ClayPot\u0022).Name .. \u0022 with water.\u0022)",
      "EnergyTrainerTalk": "\nlocal trainCost = CharacterExtensions.MaximumEnergy(character) * 2\r\ncharacter.World:CreateMessage():\r\n    AddLine(7, \u0022I am the endurance trainer.\u0022):\r\n    AddLine(7, \u0022I can increase yer energy\u0022):\r\n    AddLine(7, \u0022for the cost of 1AP and \u0022 .. trainCost .. \u0022 jools.\u0022):\r\n    AddChoice(\u0022Cool story, bro!\u0022, \u0022ExitDialog\u0022):\r\n    AddChoice(\u0022Train me!\u0022, \u0022TrainEnergy\u0022)",
      "TrainEnergy": "\nlocal msg = character.World:CreateMessage()\r\nif CharacterExtensions.AdvancementPoints(character) \u003C 1 then\r\n    msg:AddLine(7, \u0022You need at least 1 AP.\u0022)\r\n    msg:AddLine(7, \u0022Come back when yer more experienced!\u0022)\r\n    return\r\nend\r\nlocal Multiplier = 2\r\nlocal TrainingCost = Multiplier * CharacterExtensions.MaximumEnergy(character)\r\nif CharacterExtensions.Jools(character) \u003C TrainingCost then\r\n    msg:\r\n        AddLine(7, \u0022The price is \u0022 .. TrainingCost .. \u0022 jools.\u0022):\r\n        AddLine(7, \u0022I have overhead, you know.\u0022)\r\n    return\r\nend\r\nCharacterExtensions.AddAdvancementPoints(character, -1)\r\nCharacterExtensions.AddJools(character, -TrainingCost)\r\nCharacterExtensions.SetMaximumEnergy(character, CharacterExtensions.MaximumEnergy(character) \u002B 1)\r\nCharacterExtensions.AddEnergy(character, 1)\r\nmsg:AddLine(4, CharacterExtensions.Name(character) .. \u0022 loses 1 AP\u0022)\r\nmsg:AddLine(4, CharacterExtensions.Name(character) .. \u0022 loses \u0022 .. TrainingCost .. \u0022 jools\u0022)\r\nmsg:AddLine(2, CharacterExtensions.Name(character) .. \u0022 adds 1 Maximum Energy\u0022)\r\nmsg:AddLine(7, \u0022Yer now at \u0022 .. CharacterExtensions.MaximumEnergy(character) .. \u0022 Maximum Energy.\u0022)\r\nmsg:AddLine(7, \u0022Persistence is futile!\u0022)",
      "HealerTalk": "\ncharacter.World:CreateMessage():\r\n        AddLine(7, \u0022Welcome to the Nihilistic House of Healing.\u0022):\r\n        AddLine(7, \u0022If you go to the basin And wash,\u0022):\r\n        AddLine(7, \u0022you will be healed,\u0022):\r\n        AddLine(7, \u0022but it will cost you half of yer jools.\u0022):\r\n        AddLine(7, \u0022Not that I care or anything,\u0022):\r\n        AddLine(7, \u0022because I\u0027m a nihilist.\u0022):\r\n        AddChoice(\u0022Cool story, bro!\u0022, \u0022ExitDialog\u0022):\r\n        AddChoice(\u0022What\u0027s for sale?\u0022, \u0022NihilistPrices\u0022)",
      "ExitDialog": "",
      "Message": "\nMessageTypes.ToMessageTypeDescriptor(effect:GetMetadata(\u0022MessageType\u0022)):CreateMessage(character.World)",
      "DruidTeachMenu": "\nlocal canLearnForaging = not character:GetFlag(\u0022KnowsForaging\u0022)\r\nlocal canLearnTwineMaking = not character:GetFlag(\u0022KnowsTwineMaking\u0022)\r\nlocal canLearnKnapping = not character:GetFlag(\u0022KnowsRockSharpening\u0022)\r\nlocal canLearnFireMaking = not character:GetFlag(\u0022KnowsFireMaking\u0022)\r\nlocal canLearnTorchMaking = not character:GetFlag(\u0022KnowsTorchMaking\u0022)\r\nlocal canLearnHatchetMaking = not character:GetFlag(\u0022KnowsHatchetMaking\u0022)\r\nlocal canLearn = canLearnForaging or canLearnTwineMaking or canLearnKnapping or canLearnFireMaking or canLearnTorchMaking or canLearnHatchetMaking\r\nlocal msg = character.World:CreateMessage()\r\nif not canLearn then\r\n    msg:AddLine(7, \u0022You have learned all I have to teach you.\u0022)\r\n    return\r\nend\r\nmsg:AddLine(7, \u0022I can teach you these things:\u0022)\r\nmsg:AddChoice(\u0022Good to know!\u0022, \u0022ExitDialog\u0022)\r\nif canLearnForaging then\r\n    msg:AddChoice(\r\n        \u0022Foraging(-1AP)\u0022,\r\n        \u0022LearnForaging\u0022)\r\n    msg.LastChoice:SetStatistic(\u0022AdvancementPoints\u0022, 1)\r\n    msg.LastChoice:SetMetadata(\u0022FlagType\u0022, \u0022KnowsForaging\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022TaskName\u0022, \u0022forage\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022ActionName\u0022, \u0022Forage...\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022RecipeType\u0022, \u0022Foraging\u0022)\r\nend\r\nif canLearnTwineMaking then\r\n    msg:AddChoice(\r\n        \u0022Twine Making(-1AP,-2 Plant Fiber)\u0022,\r\n        \u0022LearnTwineMaking\u0022)\r\n    msg.LastChoice:SetStatistic(\u0022AdvancementPoints\u0022, 1)\r\n    msg.LastChoice:SetMetadata(\u0022FlagType\u0022, \u0022KnowsTwineMaking\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022TaskName\u0022, \u0022make twine\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022ActionName\u0022, \u0022Make Twine\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022RecipeType\u0022, \u0022Twine\u0022)\r\n    msg.LastChoice:SetFlag(\u0022LearnByDoing\u0022, true)\r\nend\r\nif canLearnKnapping then\r\n    msg:AddChoice(\r\n        \u0022Knapping(-1AP,-2 Rock)\u0022,\r\n        \u0022LearnKnapping\u0022)\r\n    msg.LastChoice:SetStatistic(\u0022AdvancementPoints\u0022, 1)\r\n    msg.LastChoice:SetMetadata(\u0022FlagType\u0022, \u0022KnowsRockSharpening\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022TaskName\u0022, \u0022knap\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022ActionName\u0022, \u0022Knap\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022RecipeType\u0022, \u0022SharpRock\u0022)\r\n    msg.LastChoice:SetFlag(\u0022LearnByDoing\u0022, true)\r\nend\r\nif canLearnFireMaking then\r\n    msg:AddChoice(\r\n        \u0022Fire Making(-1AP, -5 Rock, -5 Sticks)\u0022,\r\n        \u0022LearnFireMaking\u0022)\r\n    msg.LastChoice:SetStatistic(\u0022AdvancementPoints\u0022, 1)\r\n    msg.LastChoice:SetMetadata(\u0022FlagType\u0022, \u0022KnowsFireMaking\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022TaskName\u0022, \u0022make a fire\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022ActionName\u0022, \u0022Build Fire\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022RecipeType\u0022, \u0022CookingFire\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022Caveat\u0022, \u0022(only works in clear areas in the wilderness)\u0022)\r\n    msg.LastChoice:SetFlag(\u0022LearnByDoing\u0022, false)\r\nend\r\nif canLearnTorchMaking then\r\n    msg:AddChoice(\r\n        \u0022Torch Making(-1AP, -1 Stick, -1 Charcoal)\u0022,\r\n        \u0022LearnTorchMaking\u0022)\r\n    msg.LastChoice:SetStatistic(\u0022AdvancementPoints\u0022, 1)\r\n    msg.LastChoice:SetMetadata(\u0022FlagType\u0022, \u0022KnowsTorchMaking\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022TaskName\u0022, \u0022make a torch\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022ActionName\u0022, \u0022Make Torch\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022RecipeType\u0022, \u0022Torch\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022Caveat\u0022, \u0022(only works with a source of flames)\u0022)\r\n    msg.LastChoice:SetFlag(\u0022LearnByDoing\u0022, false)\r\nend\r\nif canLearnHatchetMaking then\r\n    msg:AddChoice(\r\n        \u0022Hatchet Making(-1AP,-1Stick,-1S.Rock,-1Twine)\u0022,\r\n        \u0022LearnHatchedMaking\u0022)\r\n    msg.LastChoice:SetStatistic(\u0022AdvancementPoints\u0022, 1)\r\n    msg.LastChoice:SetMetadata(\u0022FlagType\u0022, \u0022KnowsHatchetMaking\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022TaskName\u0022, \u0022make a hatchet\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022ActionName\u0022, \u0022Make Hatchet\u0022)\r\n    msg.LastChoice:SetMetadata(\u0022RecipeType\u0022, \u0022Hatchet\u0022)\r\n    msg.LastChoice:SetFlag(\u0022LearnByDoing\u0022, true)\r\nend",
      "DruidPrices": "\nlocal msg = character.World:CreateMessage():\r\n                AddLine(7, \u0022I sell a variety of herbs.\u0022):\r\n                AddLine(7, \u0022(\u0022 .. CharacterExtensions.Name(character) .. \u0022 has \u0022 .. CharacterExtensions.Jools(character) .. \u0022 jools)\u0022):\r\n                AddChoice(\u0022Good to know!\u0022, \u0022ExitDialog\u0022):\r\n                AddChoice(\u0022Buy Energy Herb(5 jools)\u0022,\u0022Buy\u0022)\r\nmsg.LastChoice:SetMetadata(\u0022ItemType\u0022, \u0022EnergyHerb\u0022)\r\nmsg.LastChoice:SetStatistic(\u0022Price\u0022, 5)\r\nmsg.LastChoice:SetMetadata(\u0022EffectType\u0022, \u0022DruidPrices\u0022)",
      "MakeHatchet": "\nCharacterExtensions.DoRecipe(character, 1, \u0022Hatchet\u0022, \u0022make a hatchet\u0022, \u0022makes a hatchet\u0022)",
      "SeasonRat": "\nCharacterExtensions.DoRecipe(character, 0, \u0022SeasonedRat\u0022, \u0022season a rat\u0022, \u0022seasons a rat\u0022)",
      "MakePaprika": "\nCharacterExtensions.DoRecipe(character, 1, \u0022Paprika\u0022, \u0022make paprika\u0022, \u0022makes paprika\u0022)",
      "SmokePepper": "\nCharacterExtensions.CookRecipe(character, \u0022SmokedPepper\u0022, \u0022smoke a pepper\u0022, \u0022smokes a pepper\u0022)",
      "MillWheat": "\nCharacterExtensions.DoRecipe(character, 1, \u0022Flour\u0022, \u0022make flour\u0022, \u0022makes flour\u0022)",
      "MakeDough": "\nCharacterExtensions.DoRecipe(character, 2, \u0022Dough\u0022, \u0022make dough\u0022, \u0022makes dough\u0022)",
      "CookRatBody": "\n        CharacterExtensions.CookRecipe(character, \u0022CookedRatBody\u0022, \u0022cook a rat body\u0022, \u0022cooks a rat body\u0022)",
      "CookRatCorpse": "\nCharacterExtensions.CookRecipe(character, \u0022CookedRatCorpse\u0022, \u0022cook a rat corpse\u0022, \u0022cooks a rat corpse\u0022)",
      "CutOffTail": "\nCharacterExtensions.DoRecipe(character, 2, \u0022RatTail\u0022, \u0022cut off a rat\u0027s tail\u0022, \u0022cut off a rat\u0027s tail\u0022)",
      "BuildFurnace": "\n        if not CharacterExtensions.ConsumeEnergy(character, 1, \u0022build a furnace\u0022) then\r\n            return\r\n        end\r\n        if not RecipeTypes.CanCraft(\u0022Furnace\u0022, character) then\r\n            local msg = character.World:CreateMessage():\r\n                AddLine(7, \u0022To build a furnace,\u0022):\r\n                AddLine(7, CharacterExtensions.Name(character) .. \u0022 needs:\u0022)\r\n            local recipeName = \u0022Furnace\u0022\r\n            CharacterExtensions.ReportNeededRecipeInputs(character, msg, recipeName)\r\n            return\r\n        end\r\n        RecipeTypes.Craft(\u0022Furnace\u0022, character)\r\n        character.World:CreateMessage():\r\n                AddLine(7, CharacterExtensions.Name(character) .. \u0022 builds a furnace.\u0022)\r\n        character.Cell.TerrainType = \u0022Furnace\u0022",
      "BuildFire": "\nif not CharacterExtensions.ConsumeEnergy(character, 1, \u0022build a fire\u0022) then\r\n    return\r\nend\r\nif not RecipeTypes.CanCraft(\u0022CookingFire\u0022, character) then\r\n    local msg = character.World:CreateMessage():\r\n        AddLine(7, \u0022To build a fire,\u0022):\r\n        AddLine(7, CharacterExtensions.Name(character) .. \u0022 needs:\u0022)\r\n    local inputs = RecipeTypes.Inputs(\u0022CookingFire\u0022)\r\n    for i = 0, inputs.Length-1 do\r\n        local input = inputs[i]\r\n        msg:AddLine(7, ItemTypes.ToItemTypeDescriptor(input.ItemType).Name .. \u0022: \u0022 .. character:ItemTypeCount(input.ItemType) .. \u0022/\u0022 .. input.Count)\r\n    end\r\n    return\r\nend\r\nRecipeTypes.Craft(\u0022CookingFire\u0022, character)\r\ncharacter.World:CreateMessage():\r\n        AddLine(7, CharacterExtensions.Name(character) .. \u0022 builds a small fire.\u0022)\r\ncharacter.Cell.TerrainType = \u0022CookingFire\u0022",
      "PutOutFire": "\nif not CharacterExtensions.ConsumeEnergy(character, 1, \u0022put out a fire\u0022) then\r\n    return\r\nend\r\ncharacter.World:CreateMessage():\r\n        AddLine(7, CharacterExtensions.Name(character) .. \u0022 extinguishes the fire.\u0022)\r\nif effect:HasMetadata(\u0022ItemType\u0022) then\r\n    character.Cell:AddItem(ItemInitializer.CreateItem(character.World, effect:GetMetadata(\u0022ItemType\u0022)))\r\nend\r\ncharacter.Cell.TerrainType = effect:GetMetadata(\u0022TerrainType\u0022)",
      "MakeTorch": "\nif not CharacterExtensions.ConsumeEnergy(character, 1, \u0022make a torch\u0022) then\r\n    return\r\nend\r\nif not RecipeTypes.CanCraft(\u0022Torch\u0022, character) then\r\n    local msg = character.World:CreateMessage():\r\n        AddLine(7, \u0022To make a torch,\u0022):\r\n        AddLine(7, CharacterExtensions.Name(character) .. \u0022 needs:\u0022)\r\n    local inputs = RecipeTypes.Inputs(\u0022Torch\u0022)\r\n    for i = 0,inputs.Length-1 do\r\n        msg:AddLine(7, ItemTypes.ToItemTypeDescriptor(inputs[i].ItemType).Name .. \u0022: \u0022 .. character:ItemTypeCount(inputs[i].ItemType) .. \u0022/\u0022 .. inputs[i].Count)\r\n    end\r\n    return\r\nend\r\nRecipeTypes.Craft(\u0022Torch\u0022, character)\r\ncharacter.World:CreateMessage():\r\n        AddLine(7, CharacterExtensions.Name(character) .. \u0022 makes a torch.\u0022)",
      "CookBagel": "CharacterExtensions.CookFurnaceRecipe(character, \u0022Bagel\u0022, \u0022cook a bagel\u0022, \u0022cooks a bagel\u0022)",
      "LearnForaging": "CharacterExtensions.DoLearnSkill(character,effect)",
      "LearnKnapping": "CharacterExtensions.DoLearnSkill(character,effect)",
      "LearnTwineMaking": "CharacterExtensions.DoLearnSkill(character,effect)",
      "LearnFireMaking": "CharacterExtensions.DoLearnSkill(character,effect)",
      "LearnTorchMaking": "CharacterExtensions.DoLearnSkill(character,effect)",
      "LearnHatchedMaking": "CharacterExtensions.DoLearnSkill(character,effect)",
      "DruidAllergies": "        \r\ncharacter.World:CreateMessage():\r\n    AddLine(7, \u0022Alas, I have allergies.\u0022)",
      "DruidTalk": "\ncharacter.World:CreateMessage():\r\n    AddLine(7, \u0022Greetings! I am Marcus, the hippy druid.\u0022):\r\n    AddLine(7, \u0022I can help you learn nature\u0027s way.\u0022):\r\n    AddChoice(\u0022Cool story, bro!\u0022, \u0022ExitDialog\u0022):\r\n    AddChoice(\u0022Don\u0027t druids live in the woods?\u0022, \u0022DruidAllergies\u0022):\r\n    AddChoice(\u0022Teach me!\u0022, \u0022DruidTeachMenu\u0022):\r\n    AddChoice(\u0022What\u0027s for sale?\u0022, \u0022DruidPrices\u0022)",
      "EatSeasonedRat": "\nlocal item = CharacterExtensions.ConsumedItem(character, effect)\r\nCharacterExtensions.DoHealing(character, item, 2)\r\nCharacterExtensions.DetermineSpiciness(character, character.World:CreateMessage():AddLine(11, \u0022That was a spicy one!\u0022))",
      "EatCookedRat": "\r\nlocal item = CharacterExtensions.ConsumedItem(character, effect)\r\nCharacterExtensions.DoHealing(character, item, 2)",
      "EatPepper": "        \r\nlocal item = CharacterExtensions.ConsumedItem(character, effect)\r\nlocal msg = character.World:CreateMessage():AddLine(7, CharacterExtensions.Name(character) .. \u0022 eats the pepper.\u0022)\r\nCharacterExtensions.DetermineSpiciness(character, msg)",
      "EatSmokedPepper": "        \r\nlocal item = CharacterExtensions.ConsumedItem(character, effect)\r\nlocal msg = character.World:CreateMessage():AddLine(7, CharacterExtensions.Name(character) .. \u0022 eats the smoked pepper.\u0022)\r\nCharacterExtensions.DetermineSpiciness(character, msg)",
      "SleepAtInn": "\nif character:GetFlag(\u0022PaidInnkeeper\u0022) then\r\n    character:SetFlag(\u0022PaidInnkeeper\u0022, false)\r\n    CharacterExtensions.AddEnergy(character, CharacterExtensions.MaximumEnergy(character) - CharacterExtensions.Energy(character))\r\n    character.World:CreateMessage():\r\n                AddLine(7, CharacterExtensions.Name(character) .. \u0022 rests and feels refreshed!\u0022):\r\n                AddLine(7, CharacterExtensions.Name(character) .. \u0022 has \u0022 .. CharacterExtensions.Energy(character) .. \u0022/\u0022 .. CharacterExtensions.MaximumEnergy(character) .. \u0022 energy.\u0022)\r\nelse\r\n    character.World:CreateMessage():\r\n                AddLine(7, CharacterExtensions.Name(character) .. \u0022 needs to pay Gorachan first!\u0022)\r\nend",
      "PotterFlavorText": "world:CreateMessage():AddLine(7, \u0022Um. Thanks!\u0022):AddLine(7, \u0022...\u0022):AddLine(7, \u0022What\u0027s a \u0027Movie\u0027?\u0022):AddChoice(\u0022Nevermind!\u0022, \u0022ExitDialog\u0022)",
      "Teleport": "\nrequire(\u0027Content.Scripts.teleport\u0027)\ndoTeleport(character,effect)",
      "EnterCellar": "\nrequire(\u0027Content.Scripts.teleport\u0027)\nif character:GetFlag(\u0022RatQuest\u0022) then\n    doTeleport(character,effect)\nelse\n    character.World:CreateMessage():AddLine(7, CharacterExtensions.Name(character) .. \u0022 has no business in the cellar.\u0022)\r\nend",
      "PotterTalk": "\nworld:CreateMessage():\r\n    AddLine(7, \u0022Greetings! I am Harold, the Potter.\u0022):\r\n    AddLine(7, \u0022I make pots! For jools!\u0022):\r\n    AddChoice(\u0022Cool story, bro!\u0022, \u0022ExitDialog\u0022):\r\n    AddChoice(\u0022I loved yer movies!\u0022, \u0022PotterFlavorText\u0022):\r\n    AddChoice(\u0022Make me a pot!\u0022, \u0022PotterMakePot\u0022)",
      "AcceptRatQuest": "character:SetFlag(\u0022RatQuest\u0022, true)",
      "EatRatCorpse": "\nlocal item = CharacterExtensions.ConsumedItem(character, effect)\r\nif RNG.GenerateBoolean(50, 50) then\r\n    CharacterExtensions.DoHealing(character, item, 1)\r\nelse\r\n    CharacterExtensions.SetHealth(character, CharacterExtensions.Health(character) - 1)\r\n    local msg = character.World:CreateMessage():\r\n        AddLine(7, ItemExtensions.Name(item) .. \u0022 is tainted!\u0022):\r\n        AddLine(7, CharacterExtensions.Name(character) .. \u0022 loses 1 health!\u0022)\r\n    if CharacterExtensions.IsDead(character) then\r\n        msg:AddLine(4, CharacterExtensions.Name(character) .. \u0022 dies.\u0022)\r\n    else\r\n        msg:AddLine(7, CharacterExtensions.Name(character) .. \u0022 now has \u0022 .. CharacterExtensions.Health(character) .. \u0022/\u0022 .. CharacterExtensions.MaximumHealth(character) .. \u0022 health\u0022)\r\n    end\r\nend",
      "UseEnergyHerb": "\nlocal item = CharacterExtensions.ConsumedItem(character, effect)\r\nlocal energyBenefit = 10\r\nCharacterExtensions.AddEnergy(character, energyBenefit)\r\ncharacter.World:\r\n    CreateMessage():\r\n    AddLine(7, CharacterExtensions.Name(character) .. \u0022 eats the \u0022 .. ItemExtensions.Name(item) .. \u0022.\u0022):\r\n    AddLine(7, CharacterExtensions.Name(character) .. \u0022 regains energy!\u0022):\r\n    AddLine(7, CharacterExtensions.Name(character) .. \u0022 now has \u0022 .. CharacterExtensions.Energy(character) .. \u0022/\u0022 .. CharacterExtensions.MaximumEnergy(character) .. \u0022 energy.\u0022)"
    },
    "Glyph": "\u0002",
    "Hue": 12,
    "Name": "Loxy"
  },
  "OliveGlop": {
    "MaskGlyph": "\u001A",
    "MaskHue": 0,
    "Statistics": {
      "Health": 1,
      "MaximumHealth": 1,
      "AttackDice": 2,
      "MaximumAttack": 1,
      "DefendDice": 1,
      "MaximumDefend": 1,
      "Peril": 5,
      "XP": 1
    },
    "InitializeScript": "character:SetStatistic(\u0027Jools\u0027, RNG.RollDice(\u00273d6/6\u0027))",
    "EffectScripts": {
    },
    "Glyph": "\u001B",
    "Hue": 10,
    "Name": "Olive Glop"
  },
  "Rat": {
    "MaskGlyph": "2",
    "MaskHue": 0,
    "Statistics": {
      "Health": 1,
      "MaximumHealth": 1,
      "AttackDice": 1,
      "MaximumAttack": 1,
      "DefendDice": 1,
      "MaximumDefend": 1,
      "Peril": 3,
      "XP": 0
    },
    "InitializeScript": "character:AddItem(ItemInitializer.CreateItem(character.World, \u0027RatCorpse\u0027))",
    "EffectScripts": {
    },
    "Glyph": "*",
    "Hue": 6,
    "Name": "Rat"
  },
  "Scarecrow": {
    "MaskGlyph": "\u003C",
    "MaskHue": 0,
    "Statistics": {
      "Health": 3,
      "MaximumHealth": 3,
      "AttackDice": 4,
      "MaximumAttack": 2,
      "DefendDice": 3,
      "MaximumDefend": 3,
      "Peril": 7,
      "XP": 3
    },
    "InitializeScript": "if RNG.RollDice(\u00271d5/5\u0027) \u003E 0 then\n    character:AddItem(ItemInitializer.CreateItem(character.World, \u0027StrawHat\u0027))\nend",
    "EffectScripts": {
    },
    "Glyph": ":",
    "Hue": 14,
    "Name": "Scarecrow"
  },
  "CherryGlop": {
    "MaskGlyph": "\u001A",
    "MaskHue": 0,
    "Statistics": {
      "Health": 2,
      "MaximumHealth": 2,
      "AttackDice": 4,
      "MaximumAttack": 2,
      "DefendDice": 1,
      "MaximumDefend": 1,
      "Peril": 10,
      "XP": 2
    },
    "InitializeScript": "character:SetStatistic(\u0027Jools\u0027, RNG.RollDice(\u00276d6/6\u0027))",
    "EffectScripts": {
    },
    "Glyph": "\u001B",
    "Hue": 4,
    "Name": "Cherry Glop"
  }
}